package de.enflexit.meo.plugIn.importer;

import java.io.File;

import javax.swing.JOptionPane;

import org.awb.env.networkModel.NetworkModel;
import org.awb.env.networkModel.controller.GraphEnvironmentController;
import org.awb.env.networkModel.maps.MapSettings;
import org.awb.env.networkModel.maps.MapSettings.MapScale;
import org.awb.env.networkModel.persistence.AbstractNetworkModelFileImporter;
import org.awb.env.networkModel.settings.GeneralGraphSettings4MAS;

import agentgui.core.application.Application;
import agentgui.simulationService.environment.AbstractEnvironmentModel;


/**
 * The Class MEOTopologyImporter.
 * 
 * @author Christian Derksen - DAWIS - ICB - University of Duisburg-Essen
 */
public class MEOTopologyImporter extends AbstractNetworkModelFileImporter {

	private static final String LAYOUT_DEFAULT_LAYOUT = GeneralGraphSettings4MAS.DEFAULT_LAYOUT_SETTINGS_NAME;
	private static final String LAYOUT_GeoCoordinates_WGS84 = "Geo-Coordinates WGS84";
	private static final String LAYOUT_GeoCoordinates_UTM = "Geo-Coordinates UTM";
	
	private boolean debug = false;
	
	private String errTitle;
	private String errMessage;

	private NetworkModel networkModel;
	private MapSettings mapSettings;
	private AbstractEnvironmentModel abstractEnvModel;
	
	private String layoutIdOgeInternal;
	private String layoutIdGeoCoordinateWGS84;
	private String layoutIdGeoCoordinateUTM;
	
	
	/**
	 * Instantiates a new OAD networkType importer.
	 *
	 * @param graphController the graph controller
	 * @param fileTypeExtension the file type extension
	 * @param fileTypeDescription the file type description
	 */
	public MEOTopologyImporter(GraphEnvironmentController graphController, String fileTypeExtension, String fileTypeDescription) {
		super(graphController, fileTypeExtension, fileTypeDescription);
	}
	/**
	 * Return the current NetworkModel that has to be generated by this importer.
	 * @return the networkType model
	 */
	private NetworkModel getNetworkModel() {
		if (networkModel == null) {
			networkModel = new NetworkModel();
			networkModel.setGeneralGraphSettings4MAS(this.graphController.getNetworkModel().getGeneralGraphSettings4MAS());
			networkModel.getMapSettingsTreeMap().put(this.getLayoutIdGeoCoordinateUTM(), this.getMapSettings());
		}
		return networkModel;
	}
	private MapSettings getMapSettings() {
		if (mapSettings==null) {
			mapSettings = new MapSettings();
			mapSettings.setUTMLongitudeZone(32);
			mapSettings.setUTMLatitudeZone("U");
			mapSettings.setMapScale(MapScale.km);
			mapSettings.setShowMapTiles(true);
			mapSettings.setMapTileTransparency(50);
		}
		return mapSettings;
	}
	
	/**
	 * Return the layout-ID for the OGE internal coordinates.
	 * @return the layout id OGE internal
	 */
	public String getLayoutIdOgeInternal() {
		if (layoutIdOgeInternal==null) {
			layoutIdOgeInternal = this.getNetworkModel().getGeneralGraphSettings4MAS().getLayoutIdByLayoutName(LAYOUT_DEFAULT_LAYOUT);
		}
		return layoutIdOgeInternal;
	}
	/**
	 * Returns the layout-ID for WGS84 geo coordinate.
	 * @return the layout id geo coordinate
	 */
	public String getLayoutIdGeoCoordinateWGS84() {
		if (layoutIdGeoCoordinateWGS84==null) {
			layoutIdGeoCoordinateWGS84 = this.getNetworkModel().getGeneralGraphSettings4MAS().getLayoutIdByLayoutName(LAYOUT_GeoCoordinates_WGS84); 
		}
		return layoutIdGeoCoordinateWGS84;
	}
	/**
	 * Returns the layout-ID for UTM geo coordinate WGS84.
	 * @return the layout id geo coordinate
	 */
	public String getLayoutIdGeoCoordinateUTM() {
		if (layoutIdGeoCoordinateUTM==null) {
			layoutIdGeoCoordinateUTM = this.getNetworkModel().getGeneralGraphSettings4MAS().getLayoutIdByLayoutName(LAYOUT_GeoCoordinates_UTM); 
		}
		return layoutIdGeoCoordinateUTM;
	}
	
	/* (non-Javadoc)
	 * @see org.awb.env.networkModel.controller.NetworkModelFileImporter#getAbstractEnvironmentModel()
	 */
	@Override
	public AbstractEnvironmentModel getAbstractEnvironmentModel() {
		return abstractEnvModel;
	}
	/**
	 * Sets the abstract environment model.
	 */
	private void setAbstractEnvironmentModel() {

		// --- Define the abstract environment model ----------------
		// TODO
		this.abstractEnvModel = null;
		
	}
	
	/* (non-Javadoc)
	 * @see org.awb.env.networkModel.persistence.AbstractNetworkModelFileImporter#cleanupImporter()
	 */
	@Override
	public void cleanupImporter() {
		
		this.errTitle = null;
		this.errMessage = null;
		
		this.networkModel = null;
		this.mapSettings = null;
		this.abstractEnvModel = null;
		
		this.layoutIdOgeInternal = null;
		this.layoutIdGeoCoordinateWGS84 = null;
		
	}
	
	/* (non-Javadoc)
	 * @see org.awb.env.networkModel.persistence.AbstractNetworkModelFileImporter#importNetworkModelFromFile(java.io.File)
	 */
	@Override
	public NetworkModel importNetworkModelFromFile(File netFile) {
		
		try {
			// --- Set status information -------------------------------------
			Application.setStatusBarMessage("Import file " + netFile.getAbsolutePath());
			// --- Read the specified files -----------------------------------
			
		
			// --- Create the AWB NetworkModel ----------------------------
			this.setAbstractEnvironmentModel();
			
			// TODO
			this.showError();
			
			this.printDebugOutput();
		
			
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			Application.setStatusBarMessageReady();
		}
		
		// --- Return the NetworkModel ----------------------------------------
		return this.getNetworkModel();
	}

	
	
	
	// --------------------------------------------------------------------------------------------
	// --- From here: some methods to display errors ----------------------------------------------
	// --------------------------------------------------------------------------------------------	
	/**
	 * Shows the current error.
	 */
	private void showError() {
		if (this.errMessage!=null && this.errMessage.isEmpty()==false) {
			JOptionPane.showMessageDialog(this.graphController.getGraphEnvironmentControllerGUI(), this.errMessage, this.errTitle, JOptionPane.ERROR_MESSAGE);
		}
	}
	/**
	 * Prints some the debug output.
	 */
	private void printDebugOutput() {
		if (this.debug==true) {
			
		}
	}
	
	/**
	 * Prints the specified debug line.
	 * @param message the message
	 */
	private void printDebugLine(String message) {
		this.printDebugLine(message, false);
	}
	/**
	 * Prints the specified debug line.
	 *
	 * @param message the message
	 * @param isError the is error
	 */
	private void printDebugLine(String message, boolean isError) {
		if (isError) {
			System.err.println("[" + this.getClass().getSimpleName() + "] " + message);
		} else {
			System.out.println("[" + this.getClass().getSimpleName() + "] " + message);
		}
	}
}
